version: "3.1"
services:

  webserver:
    networks:
      - ndsnet

  scheduler:
    networks:
      - ndsnet

  triggerer:
    networks:
      - ndsnet
  
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ndsnet

  broker:
    image: confluentinc/cp-kafka:6.1.1
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ndsnet

  cassandra:
    image: cassandra:4.0
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=MyCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=datacenter1
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ndsnet

  mongodb-producer:
    build: 
      context: ./mongodb-producer
      dockerfile: Dockerfile
    container_name: mongodb-producer
    depends_on:
      broker:
        condition: service_healthy
    environment:
      MONGODB_URI: "mongodb+srv://hungqlworking:IC96WUPzMTJzCkI1@cluster0.temagzq.mongodb.net/netflix_DB?retryWrites=true&w=majority&appName=Cluster0"
      KAFKA_BOOTSTRAP_SERVERS: "broker:29092"
      KAFKA_TOPIC: "user_log"
    volumes:
      - ./mongodb-producer:/app
    networks:
      - ndsnet

  consumer-cassandra:
    build:
      context: ./consumer-cassandra
      dockerfile: Dockerfile
    container_name: consumer-cassandra
    depends_on:
      broker:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "broker:29092"
      KAFKA_TOPIC: "user_log"
      CASSANDRA_CONTACT_POINTS: "cassandra"
      CASSANDRA_PORT: 9042
      CASSANDRA_KEYSPACE: "netflix_keyspace"
      CASSANDRA_USERNAME: "cassandra"
      CASSANDRA_PASSWORD: "cassandra"
    volumes:
      - ./consumer-cassandra:/app
    networks:
      - ndsnet

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    container_name: minio
    hostname: minio
    restart: always
    volumes:
      - ./include/data/minio:/data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ndsnet
  
  spark-master:
    image: airflow/spark-master
    build: ./spark/master
    container_name: spark-master
    ports:
      - "8082:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    networks:
      - ndsnet

  spark-worker:
    image: airflow/spark-worker
    build: ./spark/worker
    container_name: spark-worker
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      - ndsnet

  docker-proxy:
    image: alpine/socat
    command: "TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock"
    ports:
      - "2376:2375"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ndsnet

volumes:
  cassandra_data:

networks:
  ndsnet:
    driver: bridge
